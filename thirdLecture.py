# -*- coding: utf-8 -*-

#==============================================================================
# x = 16
# ans = 0
# if x >= 0:
#     while ans * ans < x:
#         ans = ans + 1
#         print('ans = ',ans)
#     if ans * ans != x:
#         print('x is not perfect square')
#     else:
#         print(ans)
#==============================================================================

#==============================================================================
# x = 10
# i = 1
# while i < x:
#     if x % i == 0:
#         print("divisor", i)
#     i = i + 1
#==============================================================================

#==============================================================================
# print(list(range(10)))
# print(list(range(2, 10, 2)))
# 
# x = 100
# divisor = []
#==============================================================================
#==============================================================================
# for i in range(1, x):
#     if x % i == 0:
#         divisor = divisor + [i]
#==============================================================================
#==============================================================================
# i = 1
# while i < x:
#     if x % i == 0:
#         divisor = divisor + [i]
#     i = i + 1
# print(divisor)
# 
# s1 = 'abcdefg'
# print(s1[0)
#==============================================================================

#==============================================================================
# sum = 0
# for i in str(2017):
#     sum = sum + int(i)
# print(sum)
#==============================================================================

#==============================================================================
# def sqrt(x):
#     ans = 0
#     if x >= 0:
#         while ans * ans < x:
#             ans += 1
#         if ans * ans != x:
#             print(x, 'is not perfect square')
#             return None
#         else:
#             return ans
#     else:
#         print(x, 'is a negative number')
#         return None
# 
# def func(a, b, c):
#     x = b ** 2 - 4 * a * c
#     x1 = (sqrt(x) - b) / (2 * a)
#     x2 = (-sqrt(x) - b) / (2 * a)
#     return x1, x2 
# 
# print(func(1, -1, -6))
#==============================================================================

#t = tuple(x for x in range(10))
#t = tuple(list(range(10)))
#==============================================================================
# t = tuple(range(0, 10, 2))
# 
# print(t)
#==============================================================================
#创建单元素tuple
#==============================================================================
# t = (1, )
# 
# print(t)    
#==============================================================================

#==============================================================================
# def solve(numLegs, numHeads):
#     for numChicks in range(0, numHeads + 1):
#         for numRabbits in range(0, numHeads + 1):
#             if numChicks + numRabbits == numHeads:
#                 if 2 * numChicks + 4 * numRabbits == numLegs:
#                     return numChicks, numRabbits
#     return None, None
# 
# def barnYard():
#     legs = int(input('腿的数量为：'))
#     hands = int(input('头的数量为'))
#     chicks, rabbits = solve(legs, hands)
#     if rabbits == None:
#         print('没有结果')
#     else:
#         print(chicks, rabbits)
#     
# barnYard()
#==============================================================================

#==============================================================================
# import math
# 
# a = math.sqrt(2) 
# print(a)    
#==============================================================================
 
#==============================================================================
# def squareRoot(x, epsilon): 
#     assert x >= 0
#     assert epsilon > 0
#     low = 0
#     high = x
#     guess = (low + high) / 2.0
#     ctr = 1
#     
#     while abs(guess ** 2 - x) > epsilon and ctr <= 100:
#         if guess ** 2 < x:
#             low = guess    
#         else:
#             high = guess
#         guess = (low + high) / 2.0
#         print(guess)
#         ctr += 1
#     assert ctr <= 100
#     return guess
#         
# print(squareRoot(4, 0.0001))
#==============================================================================

#==============================================================================
# def func(precess_data, x):
#     precess_data = list(range(0, 100, 3))
#     low = 0
#     high = 34
#     guess = int((low + high) / 2)
#     
#     while precess_data[guess] != x:
#         if precess_data[guess] < x:
#             low = guess
#         elif precess_data[guess] > x:
#             high = guess
#         else:
#             break
#         guess = (low + high) // 2
#     return guess
# 
# print(func(list(range(0, 100, 3)), 99))
#==============================================================================
#==============================================================================
# L = xrange(1, 101)
# print sum([i*i for i in L])
#==============================================================================

#==============================================================================
# L = range(1, 101)
# print(sum([i*i for i in L]))
#==============================================================================

#==============================================================================
# def move(n, a, b, c):
# # 如果a柱子上面只有一个盘子，则直接移到c柱子上面去并输出路径，结束递归
#     if n == 1:  
#         print(a, '-->', c)
#         return
# # 表示的是将n-1的盘子从a柱子上面移到b柱子上面去
#     move(n-1, a, c, b)
# # 输出最下面个盘子移从a移到c的路径
#     print(a, '-->', c)
# # 将b柱子上面的n-1个盘子移动到c柱子上面
#     move(n-1, b, a, c)
# 
# move(2, 'A', 'B', 'C')
#==============================================================================

L = list(range(1, 101))
#[4::5]是正序取5的倍数，[-10:]逆序取后10个。
print(L[4::5][-10:])

    
    
    
    
    
    
    
    
    
    
    
    
    
    
    
    
    
    
    












  
    
    
    
    